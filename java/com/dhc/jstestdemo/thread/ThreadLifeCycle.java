package com.dhc.jstestdemo.thread;

import android.os.SystemClock;
import android.util.Log;

/**
 * //线程生命周期
 * Created by 大漠dreamer on 2019/4/1.
 */

public class ThreadLifeCycle {

    private static final String TAG = ThreadLifeCycle.class.getSimpleName();

    private static volatile String lifeStatus = "start";

    private static Thread thread;

    public static void getThreadLifeCycle() {


        thread = new Thread(new Runnable() {
            @Override
            public void run() {
                Log.d(TAG, "run: 线程获取到CPU，执行run方法");
                lifeStatus = thread.getState().name();
                Log.d(TAG, "run: 线程执行Run方法：" + lifeStatus);
                SystemClock.sleep(3000);
                lifeStatus = thread.getState().name();
                Log.d(TAG, "run: 线程执行Run方法完毕：" + lifeStatus);
            }
        });
        thread.start();
        lifeStatus = thread.getState().name();
        Log.d(TAG, "run: 线程执行start方法：" + lifeStatus);
        try {
            long currentTime = SystemClock.currentThreadTimeMillis();
            thread.sleep(3000);
            lifeStatus = thread.getState().name();
            Log.d(TAG, "run: 线程执行sleep方法：" + lifeStatus);
            long sleepOverTime = SystemClock.currentThreadTimeMillis();

            if (sleepOverTime - currentTime >= 0) {
                lifeStatus = thread.getState().name();
                Log.d(TAG, "run: 线程执行sleep方法完毕：" + lifeStatus);
            }
            thread.sleep(3000);
            thread.join();
            lifeStatus = thread.getState().name();
            Log.d(TAG, "run: 线程执行join方法：" + lifeStatus);

//            thread.resume();
//            lifeStatus = thread.getState().name();
//            Log.d(TAG, "run: 线程执行resume方法：" + lifeStatus);

        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
