package com.dhc.jstestdemo.animation;

import android.content.Context;
import android.view.View;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.animation.AnticipateInterpolator;
import android.view.animation.CycleInterpolator;
import android.view.animation.LinearInterpolator;
import android.view.animation.RotateAnimation;
import android.view.animation.ScaleAnimation;
import android.view.animation.TranslateAnimation;

import com.dhc.jstestdemo.R;

/**
 * 补间动画
 * 平移translation、缩放scale、旋转rotate、透明度translucent
 * 1.XML形式
 * 2.代码形式
 * Created by 大漠dreamer on 2019/3/21.
 */

public class PatchAnimationUtils {

    /**
     * 平移动画
     *
     * @param view       需要控制的view
     * @param turnStatus true代表平移进入视图，false代表平移离开视图
     * @param isXml      true代表使用xml形式，false代表使用代码形式
     * @param context    上下文
     */
    public static void translateAnimation(View view, boolean turnStatus, boolean isXml, Context context) {
        int x = view.getWidth();
        int y = view.getHeight();
        //通过代码形式来实现
        if (!isXml) {
            if (turnStatus) {//当视图不可见，平移进入视图
                if (View.INVISIBLE == view.getVisibility() && View.GONE == view.getVisibility()) {
                    TranslateAnimation tsAni = new TranslateAnimation(x, 0, y, 0);
                    tsAni.setInterpolator(new AccelerateInterpolator());//插值器--从慢到快
                    tsAni.setDuration(1000 * 3);
                    view.setAlpha(1f);
                    tsAni.setFillAfter(true);
                    view.setVisibility(View.VISIBLE);
                    view.startAnimation(tsAni);
                }
            } else {
                if (View.VISIBLE == view.getVisibility()) {//当视图可见，平移移出视图
                    TranslateAnimation tsAni = new TranslateAnimation(-x, -x * 2, -y, -y * 2);
                    tsAni.setInterpolator(new LinearInterpolator());//线性加速
                    tsAni.setDuration(1000 * 2);
                    view.setAlpha(0.5f);
                    tsAni.setFillAfter(true);
                    view.setVisibility(View.GONE);
                    view.startAnimation(tsAni);
                }
            }
        } else {
            if (turnStatus) {//移入
                Animation animation = AnimationUtils.loadAnimation(context,
                        R.anim.translation_in);
                view.startAnimation(animation);

            } else {//移出
                Animation animation = AnimationUtils.loadAnimation(context, R.anim.translation_out);
                view.startAnimation(animation);
            }
        }
    }

    /**
     * 缩放动画
     *
     * @param context 上下文
     * @param view    需要缩放的view
     * @param isXml   true代表Xml方式实现，false代表代码形式实现
     */
    public static void scaleAnimation(Context context, View view, boolean isXml) {

        if (!isXml) {
            ScaleAnimation animation = new ScaleAnimation(0.2f, 1.5f, 0.2f, 1.5f);
            animation.setInterpolator(new AnticipateInterpolator());//反向，先向相反方向改变一段再加速播放。
            animation.setDuration(1000 * 3);
            view.startAnimation(animation);
        } else {
            Animation animation = AnimationUtils.loadAnimation(context, R.anim.scale);
            view.startAnimation(animation);
        }
    }

    /**
     * 旋转动画
     *
     * @param context 上下文
     * @param view    需要缩放的view
     * @param isXml   true代表Xml方式实现，false代表代码形式实现
     */
    public static void rotateAnimation(Context context, View view, boolean isXml) {

        if (!isXml) {
            //从0-360°，X方向从左开始，Y方向从上边开始
            RotateAnimation animation = new RotateAnimation(0, 360, 0f, 0f);
            animation.setInterpolator(new CycleInterpolator(3));//转3圈
            animation.setDuration(1000 * 3);
            view.startAnimation(animation);
        } else {
            Animation animation = AnimationUtils.loadAnimation(context, R.anim.rotate);
            view.startAnimation(animation);
        }
    }

    /**
     * 透明度动画
     *
     * @param context 上下文
     * @param view    需要缩放的view
     * @param isXml   true代表Xml方式实现，false代表代码形式实现
     */
    public static void alphaAnimation(Context context, View view, boolean isXml) {

        if (!isXml) {
            //从0-360°，X方向从左开始，Y方向从上边开始
            AlphaAnimation animation = new AlphaAnimation(0f, 1f);
            animation.setInterpolator(new AccelerateDecelerateInterpolator());//前后慢，中间快
            animation.setDuration(1000 * 3);
            view.startAnimation(animation);
        } else {
            Animation animation = AnimationUtils.loadAnimation(context, R.anim.all_animation);
            view.startAnimation(animation);
        }
    }
}
