package com.dhc.jstestdemo.animation;

import android.animation.ObjectAnimator;
import android.animation.PointFEvaluator;
import android.animation.TypeEvaluator;
import android.animation.ValueAnimator;
import android.graphics.Color;
import android.graphics.PointF;
import android.os.Build;
import android.util.Log;
import android.view.View;
import android.view.animation.AnticipateInterpolator;
import android.view.animation.AnticipateOvershootInterpolator;
import android.view.animation.BounceInterpolator;
import android.view.animation.DecelerateInterpolator;

import com.dhc.jstestdemo.customview.TableTextView;

/**
 * 属性动画，
 * 其中包括ValueAnimator以及ObjectAnimator
 * Created by 大漠dreamer on 2019/3/21.
 */

public class AttributeAnimationUtil {

    private static final String TAG = AttributeAnimationUtil.class.getSimpleName();
    private ValueAnimator valueAnimator;
    private ObjectAnimator objectAnimator;

    //空构造方法
    public AttributeAnimationUtil() {
    }


    /**
     * 给目标对象设置以Integer类型变化的动画
     *
     * @param target 目标对象，可以是任何类型
     */
    public void setValueAnimationOfInt(final TableTextView target) {
        int[] values = {1, 1000};
        valueAnimator = ValueAnimator.ofInt(values);
        valueAnimator.setDuration(1000 * 10);
        valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                Integer integer = (Integer) animation.getAnimatedValue();
                target.setText("数字Int变化：" + integer);
            }
        });
        valueAnimator.setInterpolator(new DecelerateInterpolator());
        valueAnimator.setRepeatCount(3);
        valueAnimator.start();
    }

    /**
     * 给目标对象设置以Float类型变化的动画
     *
     * @param target 目标对象，可以是任何类型
     */
    public void setValueAnimatorOfFloat(final TableTextView target) {
        float[] values = {0.1f, 1.1f, 100f};
        valueAnimator = ValueAnimator.ofFloat(values);
        valueAnimator.setDuration(1000 * 10);
        valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                float value = (float) animation.getAnimatedValue();
                target.setText("数值Float变化：" + value);
            }
        });
//        valueAnimator.setTarget(target);
        valueAnimator.setInterpolator(new AnticipateInterpolator());//反向，先向相反方向改变一段再加速播放
        valueAnimator.setRepeatMode(ValueAnimator.RESTART);
        valueAnimator.start();
    }

    /**
     * 给目标对象设置以Argb类型变化的动画
     *
     * @param target 目标对象，可以是任何类型
     */
    public void setValueAnimatorOfArgb(final TableTextView target) {
        int[] values = {0x00ffff, 0x00ffee};
        if (Build.VERSION.SDK_INT >= 21) {//这个方法只在android5.0之后生效
            valueAnimator = ValueAnimator.ofArgb(values);
            valueAnimator.setDuration(1000 * 3);
            valueAnimator.setInterpolator(new AnticipateOvershootInterpolator());//开始的时候向后然后向前甩一定值后返回最后的值
            valueAnimator.setRepeatCount(3);
            valueAnimator.setRepeatMode(ValueAnimator.REVERSE);

            valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                @Override
                public void onAnimationUpdate(ValueAnimator animation) {
                    Integer integer = (Integer) animation.getAnimatedValue();
                    target.setText("按照argb变化：" + integer);
                }
            });
            valueAnimator.start();
        } else {
            Log.d(TAG, "Current SDK version is not support this ： ValueAnimator.ofArgb");
        }
    }


    /**
     * * 给目标对象设置以自定义Object类型变化的动画
     *
     * @param target 目标对象，可以是任何类型
     */

    public void setValueAnimatorOfObject(final TableTextView target) {
        //对象的集合，这里可以自定义不同效果的对象
        Object[] objects = {new PointF(), new PointF(1, 1)};
        if (Build.VERSION.SDK_INT >= 21) {//这个方法只在android5.0之后生效
            TypeEvaluator<PointF> evaluator = new PointFEvaluator();
            valueAnimator = ValueAnimator.ofObject(evaluator, objects);
            valueAnimator.setRepeatMode(ValueAnimator.REVERSE);
            valueAnimator.setDuration(1000 * 10);
            valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                @Override
                public void onAnimationUpdate(ValueAnimator animation) {
                    Object object = animation.getAnimatedValue();
                    target.setText("object???:" + object.toString());
                }
            });
            valueAnimator.start();
        } else

        {
            Log.d(TAG, "Current SDK version is not support this ： new PointFEvaluator");
        }

    }

    /**
     * 用属性动画实现补间动画效果
     * 这里实现旋转动画，以目标view的中心为圆心
     * 除旋转外，补间动画的其余效果都能实现，这里需要注意的是，需要ObjectAnimator的ofFloat方法，其他方法不行
     *
     * @param target 目标view
     */
    public void setObjectAnimatorOfFloat(View target) {

        target.setPivotX(target.getWidth());
        target.setPivotY(target.getHeight());
        objectAnimator = ObjectAnimator.ofFloat(target, "rotation", 0, 360f);
        objectAnimator.setDuration(1000 * 5
        );
        objectAnimator.setRepeatCount(2);
        objectAnimator.setRepeatMode(ValueAnimator.RESTART);
        objectAnimator.setInterpolator(new BounceInterpolator());
        objectAnimator.start();
    }


    /**
     * 特殊，通过ofInt方法来实现自定义View的动画
     *
     * @param target 目标对象
     */
    public void setObjectAnimatorOfIntByCustomView(TableTextView target) {
        objectAnimator = ObjectAnimator.ofInt(target, "customColor", Color.parseColor("#4B0082"), Color.parseColor("#CD0000"), Color.parseColor("#CCCCCC"));
        objectAnimator.setRepeatCount(1);
        objectAnimator.setDuration(1000 * 10);
        objectAnimator.setInterpolator(new AnticipateInterpolator());
        objectAnimator.start();
    }
}
