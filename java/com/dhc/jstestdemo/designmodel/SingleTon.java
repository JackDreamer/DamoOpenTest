//package com.dhc.jstestdemo.designmodel;
//
///**
// * 单例模式实例代码
// * Created by 大漠dreamer on 2019/4/17.
// */
//
//public class SingleTon {
//    //饿汉式
//    public class SingleTonHungry {
//
//        //空构造函数
//        public SingleTonHungry() {
//
//        }
//
//        private static SingleTonHungry instance = null;
//
//        public static SingleTonHungry getInstance() {
//            if (instance == null) {
//                instance = new SingleTonHungry();
//            }
//            return instance;
//        }
//    }
//
//    //懒汉式
//    public class SingleTonLull {
//
//        private static SingleTonLull instance = null;
//
//        public SingleTonLull() {
//            if (instance == null) {
//                instance = new SingleTonLull();
//            }
//        }
//    }
//
//    //静态内部类模式
//    public class SingleTonStaticInner {
//        private static final class MyInstance {
//            public static final SingleTonStaticInner instance = new SingleTonStaticInner();
//        }
//
//        public static SingleTonStaticInner getInstance() {
//            return MyInstance.instance;
//        }
//    }
//
//    //同步锁方式
//    public class SingleTonSync {
//        private static SingleTonSync instance = null;
//
//        public static synchronized SingleTonSync getInstance() {
//            if (instance == null) {
//                instance = new SingleTonSync();
//            }
//            return instance;
//        }
//    }
//
//    //优化同步锁方式
//    public class SingleTonSyncUpdate {
//        private static SingleTonSyncUpdate instance = null;
//
//        public static SingleTonSyncUpdate getInstance() {
//            if (instance == null) {
//                synchronized (SingleTonSyncUpdate.class) {
//                    instance = new SingleTonSyncUpdate();
//                }
//            }
//            return instance;
//        }
//    }
//
//
//    //双重校验同步锁方式
//    public class SingleTonDualCheck {
//        private static SingleTonDualCheck instance = null;
//
//        public static SingleTonDualCheck getInstance() {
//            if (instance == null) {
//                synchronized (SingleTonDualCheck.class) {
//                    if (instance == null) {
//                        instance = new SingleTonDualCheck();
//                    }
//                }
//            }
//            return instance;
//        }
//    }
//}
