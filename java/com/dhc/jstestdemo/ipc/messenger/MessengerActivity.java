package com.dhc.jstestdemo.ipc.messenger;

import android.app.Activity;
import android.content.ComponentName;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.Messenger;
import android.os.RemoteException;
import android.support.annotation.Nullable;
import android.util.Log;
import android.view.View;

import com.dhc.jstestdemo.MapTest;
import com.dhc.jstestdemo.R;
import com.dhc.jstestdemo.algorithmanalysis.IceCream;
import com.dhc.jstestdemo.algorithmanalysis.SortTest;
import com.dhc.jstestdemo.animation.AttributeAnimationUtil;
import com.dhc.jstestdemo.animation.PatchAnimationUtils;
import com.dhc.jstestdemo.customview.TableTextView;
import com.dhc.jstestdemo.producerandconsumer.ModelOne;
import com.dhc.jstestdemo.producerandconsumer.ModelThree;
import com.dhc.jstestdemo.thread.ThreadLifeCycle;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

import static com.dhc.jstestdemo.Constant.MSG_FROM_MESSENGER_CLIENT;
import static com.dhc.jstestdemo.Constant.MSG_FROM_MESSENGER_SERVICE;

/**
 * Created by 大漠dreamer on 2019/3/13.
 */

public class MessengerActivity extends Activity {


    public static final String TAG = MessengerActivity.class.getSimpleName();

    private Messenger mService = null;

    private MessengerService.MyBinder binder = null;

    private ServiceConnection connection2 = new ServiceConnection() {
        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
            binder = (MessengerService.MyBinder) service;
            binder.download();
            binder.getProgress();
        }

        @Override
        public void onServiceDisconnected(ComponentName name) {

        }
    };

    private ServiceConnection connection = new ServiceConnection() {
        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
            mService = new Messenger(service);
            Message message = Message.obtain(null, MSG_FROM_MESSENGER_CLIENT);
            Bundle bundle = new Bundle();
            bundle.putString("msg", "hello, i am client");
            message.setData(bundle);
            message.replyTo = messenger;
            try {
                mService.send(message);
            } catch (RemoteException e) {
                e.printStackTrace();
            }
        }

        @Override
        public void onServiceDisconnected(ComponentName name) {

        }
    };

    private Messenger messenger = new Messenger(new MessengerHandler());

    private static class MessengerHandler extends Handler {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case MSG_FROM_MESSENGER_SERVICE:
                    Log.d(TAG, "receive msg from service: " +
                            msg.getData().get("reply"));

                    break;
                default:
                    super.handleMessage(msg);
            }
        }
    }

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_messenger);
//        Intent intent = new Intent(this, MyMessengerIntentService.class);
//        bindService(intent, connection, Context.BIND_AUTO_CREATE);
//
//        Intent intent2 = new Intent(this, MessengerService.class);
//        bindService(intent2, connection2, Context.BIND_AUTO_CREATE);
//
//        LockTest lockTest = new LockTest();
//        lockTest.test();
//        testAnimation();
//        testPCModel();
//
//        MapTest test = new MapTest();
//        test.getIds("1");
//        SortTest test = new SortTest();
//        test.bucketSort();
//        IceCream.test();
//        test.bubbleSort();
//        test.quickLySortTest();
        ThreadLifeCycle.getThreadLifeCycle();

        this.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                //主线程
            }
        });

    }


    private void testPCModel() {
        final BlockingQueue queue = new ArrayBlockingQueue<>(5);
        ModelThree model = new ModelThree(queue);
//        ModelOne model=new ModelOne();
        new Thread(model.new Producer()).start();
        new Thread(model.new Consumer()).start();
        new Thread(model.new Consumer()).start();
        new Thread(model.new Producer()).start();


    }

    private void testAnimation() {
        final TableTextView textView = findViewById(R.id.tb_tv_activity_test);
        textView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                AttributeAnimationUtil util = new AttributeAnimationUtil();

//                util.setObjectAnimatorOfIntByCustomView(textView);
//                util.setObjectAnimatorOfFloat(textView);
//
//                util.setValueAnimationOfInt(textView);
//                util.setValueAnimatorOfArgb(textView);
//                util.setValueAnimatorOfObject(textView);
//                util.setValueAnimatorOfFloat(textView);
                PatchAnimationUtils.alphaAnimation(MessengerActivity.this, textView, true);
            }
        });
    }

    @Override
    protected void onDestroy() {
        //解绑
        unbindService(connection);
        super.onDestroy();
    }
}
