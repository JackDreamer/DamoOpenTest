package com.dhc.jstestdemo.ipc.binder.binderpool;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Binder;
import android.os.IBinder;
import android.os.RemoteException;
import android.util.Log;

import java.util.concurrent.CountDownLatch;

/**
 * Created by 大漠dreamer on 2019/3/15.
 */

public class BinderPool {
    private static final String TAG = BinderPool.class.getSimpleName();

    //单例模式获取BinderPool对象

    private Context mContext;

    public BinderPool(Context context) {
        mContext = context.getApplicationContext();
        connectBinderPoolService();
    }

    public static volatile BinderPool mIntance;
    private CountDownLatch countDownLatch = null;
    private IBinderPool pool;

    public static BinderPool getmIntance(Context context) {
        if (mIntance != null) {
            return mIntance;
        }
        synchronized (BinderPool.class) {
            if (mIntance == null) {
                mIntance = new BinderPool(context);
            }
        }
        return mIntance;
    }

    /**
     * 连接Binder池服务
     */
    private synchronized void connectBinderPoolService() {
        Log.d(TAG, "connectBinderPoolService: ");
        countDownLatch = new CountDownLatch(1);
        Intent intent = new Intent(mContext, BinderPoolService.class);
        mContext.bindService(intent, connection, Context.BIND_AUTO_CREATE);
        try {
            countDownLatch.await();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    /**
     * 获取Binder
     *
     * @param binderCode
     * @return
     */
    public IBinder queryBinder(int binderCode) {
        Log.d(TAG, "queryBinder: ");
        IBinder iBinder = null;
        if (pool != null) {
            try {
                iBinder = pool.queryBinder(binderCode);
            } catch (RemoteException e) {
                e.printStackTrace();
            }
        }
        return iBinder;
    }

    private ServiceConnection connection = new ServiceConnection() {
        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
            Log.d(TAG, "onServiceConnected: ");
            pool = IBinderPool.Stub.asInterface(service);
            try {
                pool.asBinder().linkToDeath(deathRecipient, 0);
            } catch (RemoteException e) {
                e.printStackTrace();
            }
            countDownLatch.countDown();
        }

        @Override
        public void onServiceDisconnected(ComponentName name) {

        }
    };

    private IBinder.DeathRecipient deathRecipient = new IBinder.DeathRecipient() {
        @Override
        public void binderDied() {
            Log.d(TAG, "binderDied: ");

            pool.asBinder().unlinkToDeath(deathRecipient, 0);
            pool = null;
            //重新连接
            connectBinderPoolService();
        }
    };
}
