package com.dhc.jstestdemo.ipc.binder.manualaidl;

import android.os.Binder;
import android.os.IBinder;
import android.os.Parcel;
import android.os.RemoteException;

import com.dhc.jstestdemo.ipc.binder.aidl.Book2;

import java.util.List;

/**
 * Created by 大漠dreamer on 2019/3/11.
 */

public class Book2ManagerImpl extends Binder implements IBookManager {

    private Book2ManagerImpl impl;

    public Book2ManagerImpl() {
        this.attachInterface(this, DESCRIPTOR);
    }

    public static IBookManager asInterface(IBinder obj) {
        if (obj == null) {
            return null;
        }

        android.os.IInterface iInterface = obj.queryLocalInterface(DESCRIPTOR);

        if (iInterface != null && iInterface instanceof IBookManager) {
            return (IBookManager) iInterface;
        }
        return new Book2ManagerImpl.Proxy(obj);
    }

    @Override
    public IBinder asBinder() {
        return this;
    }

    @Override
    protected boolean onTransact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {

        switch (code) {
            case INTERFACE_TRANSACTION:
                reply.writeString(DESCRIPTOR);
                return true;
            case TRANSACTION_getBookList:
                data.enforceInterface(DESCRIPTOR);
                List<Book2> result = this.getBookList();
                reply.writeNoException();
                reply.writeTypedList(result);
                return true;
            case TRANSACTION_addBook:
                data.enforceInterface(DESCRIPTOR);
                Book2 arg0;
                if (0 != data.readInt()) {
                    arg0 = Book2.CREATOR.createFromParcel(data);

                } else {
                    arg0 = null;
                }
                this.addBook(arg0);
                reply.writeNoException();
                return true;
        }

        return super.onTransact(code, data, reply, flags);
    }

    @Override
    public List<Book2> getBookList() throws RemoteException {
        return null;
    }

    @Override
    public void addBook(Book2 book) throws RemoteException {

    }

    private static class Proxy implements IBookManager {

        private IBinder mRemote;

        public Proxy(IBinder mRemote) {
            this.mRemote = mRemote;
        }

        @Override
        public IBinder asBinder() {
            return mRemote;
        }

        public String getInterfaceDescriptor() {
            return DESCRIPTOR;
        }

        @Override
        public List<Book2> getBookList() throws RemoteException {

            Parcel data = Parcel.obtain();
            Parcel reply = Parcel.obtain();
            List<Book2> result;

            data.writeInterfaceToken(DESCRIPTOR);
            mRemote.transact(TRANSACTION_getBookList, data, reply, 0);
            reply.readException();
            result = reply.createTypedArrayList(Book2.CREATOR);
            reply.recycle();
            data.recycle();

            return result;
        }

        @Override
        public void addBook(Book2 book) throws RemoteException {
            Parcel data = Parcel.obtain();
            Parcel reply = Parcel.obtain();


            data.writeInterfaceToken(DESCRIPTOR);
            if (book != null) {
                data.writeInt(1);
                book.writeToParcel(data, 0);
            } else {
                data.writeInt(0);
            }

            mRemote.transact(TRANSACTION_addBook, data, reply, 0);
            reply.readException();

            reply.recycle();
            data.recycle();
        }

    }

    private IBinder.DeathRecipient mDeathRecipient = new IBinder.DeathRecipient() {

        @Override
        public void binderDied() {
            if (impl == null) {
                return;
            }
            impl.asBinder().unlinkToDeath(mDeathRecipient, 0);
            impl = null;
            //TODO 重新绑定远程Service
            //重新绑定成功之后设置死亡代理
            impl.linkToDeath(mDeathRecipient, 0);

            //判断Binder是否死亡
            impl.isBinderAlive();
        }
    };
}
