package com.dhc.jstestdemo.ipc.newaidl;

import android.app.IntentService;
import android.content.Intent;
import android.os.Binder;
import android.os.IBinder;
import android.os.RemoteException;
import android.os.SystemClock;
import android.support.annotation.Nullable;
import android.util.Log;

import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * Created by 大漠dreamer on 2019/3/13.
 */

public class MyLibraryBookIntentService extends IntentService {


    public MyLibraryBookIntentService() {
        super("MyLibraryBookIntentService");
    }

    @Override
    protected void onHandleIntent(@Nullable Intent intent) {

    }

    private static final String TAG = MyLibraryBookIntentService.class.getSimpleName();

    private CopyOnWriteArrayList<LibraryBook> mBookList = new CopyOnWriteArrayList<LibraryBook>();

    private CopyOnWriteArrayList<INewBookArriveListener> listenerList =
            new CopyOnWriteArrayList<INewBookArriveListener>();

    private AtomicBoolean isServiceDestroy = new AtomicBoolean(false);

    private Binder mBinder = new ILibraryBookManager.Stub() {
        @Override
        public void addBook(LibraryBook book) throws RemoteException {
            mBookList.add(book);
        }

        @Override
        public List<LibraryBook> getBookList() throws RemoteException {
            return mBookList;
        }

        @Override
        public void registerNewBookListener(INewBookArriveListener listener) throws RemoteException {
            if (!listenerList.contains(listener)) {
                listenerList.add(listener);
            } else {
                Log.d(TAG, "registerNewBookListener: already have");
            }
            Log.d(TAG, "registerNewBookListener: current size:" + listenerList.size());
        }

        @Override
        public void unRegisterNewBookListener(INewBookArriveListener listener) throws RemoteException {
            if (listenerList.contains(listener)) {
                listenerList.remove(listener);
            } else {
                Log.d(TAG, "unRegisterNewBookListener: already delete");
            }
            Log.d(TAG, "unRegisterNewBookListener: current size:" + listenerList.size());
        }
    };

    @Override
    public void onCreate() {
        super.onCreate();

        mBookList.add(new LibraryBook("The art of Android Develop", 1));
        mBookList.add(new LibraryBook("The science of Computer Internet", 2));

        //开线程5秒更新一次书籍状态
        new Thread(new ServiceWorker()).start();
    }

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return mBinder;
    }

    @Override
    public void onDestroy() {
        isServiceDestroy.set(true);
        super.onDestroy();
    }

    private void onNewBookArrived(LibraryBook book) {
        mBookList.add(book);
        for (int i = 0; i < listenerList.size(); i++) {
            INewBookArriveListener listener = listenerList.get(i);
            try {
                Log.d(TAG, "onNewBookArrived: listenerList.size：" + listenerList.size());
                listener.onNewBookArrived(book);
            } catch (RemoteException e) {
                e.printStackTrace();
            }
        }
    }

    private class ServiceWorker implements Runnable {

        @Override
        public void run() {
            while (!isServiceDestroy.get()) {
                SystemClock.sleep(5000);

                int bookId = mBookList.size() + 1;

                LibraryBook book = new LibraryBook("new Book#" + bookId, bookId);

                onNewBookArrived(book);
            }
        }
    }
}
