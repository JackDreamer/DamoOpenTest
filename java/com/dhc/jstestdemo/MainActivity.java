package com.dhc.jstestdemo;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.webkit.WebChromeClient;
import android.widget.Toast;

import com.github.lzyzsd.jsbridge.BridgeHandler;
import com.github.lzyzsd.jsbridge.BridgeWebView;
import com.github.lzyzsd.jsbridge.BridgeWebViewClient;
import com.github.lzyzsd.jsbridge.CallBackFunction;
import com.github.lzyzsd.jsbridge.DefaultHandler;
import com.google.gson.Gson;

import java.io.IOException;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class MainActivity extends AppCompatActivity {

    BridgeWebView mWebView;
    private String webUrl = "http://192.168.1.31:8080/testJSBridge.html";
    //    private String webUrl = "https://www.baidu.com";
    private static CallBackFunction mfunction;
    int RESULT_CODE = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initWebView();
//        clusterCal();
    }


    private void initWebView() {
        mWebView = findViewById(R.id.activity_web_view);
        //设置WebView客户端，用于接收通知和请求
        mWebView.setWebViewClient(new MyWebViewClient(mWebView));
        //设置Handler，用于处理JS发送过来的数据
        mWebView.setDefaultHandler(new MyHandlerCallback());
        //
        mWebView.setWebChromeClient(new WebChromeClient());
        //加载服务器网页或者本地网页
        mWebView.loadUrl(webUrl);

        //必须和js同名函数，注册具体执行函数，类似java实现类。
        mWebView.registerHandler("submitFromWeb", new BridgeHandler() {
            @Override
            public void handler(String data, CallBackFunction function) {
                //对原始数据进行处理
                String str = "这是html返回给java的数据：" + data;
                str += ",对原始数据进行了截取操作：" + str.substring(0, 5);
                showToast(str);
                //回调返回给JS
                function.onCallBack(str);
            }
        });

        //打开本地文件
        mWebView.registerHandler("openFile", new BridgeHandler() {
            @Override
            public void handler(String data, CallBackFunction function) {
                pickFile();
                mfunction = function;
            }
        });

        //模拟用户获取本地位置
        User user = new User();
        user.name = "alice";
        Location location = new Location();
        location.address = "上海";
        user.location = location;
        //webView调用js的方法
        mWebView.callHandler("functionInJs", new Gson().toJson(user), new CallBackFunction() {
            @Override
            public void onCallBack(String data) {
                showToast(data);
            }
        });
        mWebView.send("I am java ! Hello!");
    }

    private void showToast(String string) {
        Toast.makeText(MainActivity.this, string, Toast.LENGTH_SHORT).show();
    }

    public void pickFile() {
        Intent chooserIntent = new Intent(Intent.ACTION_GET_CONTENT);
        chooserIntent.setType("image/*");
        startActivityForResult(chooserIntent, RESULT_CODE);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {
        if (requestCode == RESULT_CODE) {
            Uri result = intent == null || resultCode != RESULT_OK ? null : intent.getData();
            mfunction.onCallBack(result.toString());
        }
    }

    class MyWebViewClient extends BridgeWebViewClient {

        public MyWebViewClient(BridgeWebView webView) {
            super(webView);
        }
    }

    class MyHandlerCallback extends DefaultHandler {
        @Override
        public void handler(String data, CallBackFunction function) {
            super.handler(data, function);
            if (null != function) {
                showToast(data);
                function.onCallBack("收到JS消息回复。");
            }
        }
    }

    static class Location {
        String address;
    }

    static class User {
        String name;
        Location location;
        String testStr;
    }

    private void okHttp3SourceCodeAnalysis() {
        OkHttpClient client = new OkHttpClient();
        Request request = new Request.Builder().url("").build();//get方式
//        RequestBody body=new Request.Builder().
//                addHeader("","")
//                .
        Call call = client.newCall(request);
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {

            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {

            }
        });
    }
}
