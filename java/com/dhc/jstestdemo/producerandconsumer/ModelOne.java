package com.dhc.jstestdemo.producerandconsumer;

import android.os.SystemClock;
import android.util.Log;

/**
 * 通过wait和notify方法，实现生产消费者模型
 * Created by 大漠dreamer on 2019/3/22.
 */

public class ModelOne {

    //设置缓存区
    private static final Integer FULL = 5;
    //设置起始值变量
    private static final Integer START = 0;
    private static final String TAG = ModelOne.class.getSimpleName();
    //当前缓存区存在多少
    private static int count = 0;
    //设置一个锁对象
    private static final String LOCK = "lock";


    //生产者
    public class Producer implements Runnable {

        @Override
        public void run() {
            for (int i = 0; i < 5; i++) {
                SystemClock.sleep(1000 * 3);

                synchronized (LOCK) {
                    while (FULL == count) {
                        try {
                            LOCK.wait();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                    count++;
                    Log.d(TAG, "Producer---当前" + Thread.currentThread().getName() + "线程已经生产了，目前总有：" + count);
                    LOCK.notifyAll();
                }
            }

        }
    }

    public class Consumer implements Runnable {

        @Override
        public void run() {
            for (int i = 0; i < 5; i++) {
                SystemClock.sleep(1000 * 3);

                synchronized (LOCK) {
                    while (START == count) {
                        try {
                            LOCK.wait();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                    count--;
                    Log.d(TAG, "Consumer---当前" + Thread.currentThread().getName() + "线程已经消费了，目前总共有： " + count);
                    LOCK.notifyAll();
                }
            }
        }
    }
}
