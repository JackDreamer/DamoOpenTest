package com.dhc.jstestdemo.producerandconsumer;

import android.os.SystemClock;
import android.util.Log;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingDeque;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

/**
 * 通过BlockingQueue，实现生产消费者模型
 * Created by 大漠dreamer on 2019/3/22.
 */

public class ModelThree {

    private static final String TAG = ModelThree.class.getSimpleName();
    //当前缓存区存在多少
    private static int count = 0;
    private BlockingQueue queue = null;


    public ModelThree(BlockingQueue queue) {
        this.queue = queue;
    }

    //生产者
    public class Producer implements Runnable {

//        private BlockingQueue queue = null;
//
//        public Producer(BlockingQueue queue) {
//            this.queue = queue;
//        }

        @Override
        public void run() {
            for (int i = 0; i < 5; i++) {
                try {
                    Thread.sleep(1000 * 3);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                try {
                    queue.put(1);
                    count++;
                    Log.d(TAG, "Producer---当前" + Thread.currentThread().getName() + "线程生产，目前总共有:" + count + "  循环:" + i);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

    }

    public class Consumer implements Runnable {
//        private BlockingQueue queue = null;
//
//        public Consumer(BlockingQueue queue) {
//            this.queue = queue;
//        }

        @Override
        public void run() {
            for (int i = 0; i < 5; i++) {
                try {
                    Thread.sleep(1000 * 3);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                try {
                    queue.take();
                    count--;
                    Log.d(TAG, "Consumer---当前" + Thread.currentThread().getName() + "线程消费，目前总共有:" + count + "  循环:" + i);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
