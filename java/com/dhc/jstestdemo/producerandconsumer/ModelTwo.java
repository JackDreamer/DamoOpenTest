package com.dhc.jstestdemo.producerandconsumer;

import android.os.SystemClock;
import android.util.Log;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

/**
 * 通过ReentrantLock，实现生产消费者模型
 * Created by 大漠dreamer on 2019/3/22.
 */

public class ModelTwo {

    //设置缓存区
    private static final Integer FULL = 5;
    //设置起始值变量
    private static final Integer START = 0;
    private static final String TAG = ModelTwo.class.getSimpleName();
    //当前缓存区存在多少
    private static int count = 0;

    //创建锁对象,默认为非公平锁
    private static ReentrantLock lock = new ReentrantLock();

    //不满时
    private static final Condition NOT_FULL = lock.newCondition();

    //不空时
    private static final Condition NOT_EMPTY = lock.newCondition();

    //生产者
    public class Producer implements Runnable {

        @Override
        public void run() {
            for (int i = 0; i < 5; i++) {
                SystemClock.sleep(1000 * 3);

                lock.lock();
                try {
                    while (FULL == count) {
                        NOT_FULL.await();
                    }
                    count++;
                    Log.d(TAG, "Producer---当前" + Thread.currentThread().getName() + "线程已经生产了，目前总有：" + count);

                    //唤醒消费者
                    NOT_EMPTY.signal();
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    //解锁
                    lock.unlock();
                }


            }
        }

    }

    public class Consumer implements Runnable {

        @Override
        public void run() {
            for (int i = 0; i < 5; i++) {
                SystemClock.sleep(1000 * 3);

                lock.lock();
                try {
                    while (START == count) {
                        NOT_EMPTY.await();
                    }
                    count--;
                    Log.d(TAG, "Consumer---当前" + Thread.currentThread().getName() + "线程已经消费了，目前总共有： " + count);

                    //唤醒生产者
                    NOT_FULL.signal();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                } finally {
                    lock.unlock();
                }
            }
        }
    }
}
